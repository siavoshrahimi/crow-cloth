{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\programing\\\\webstorm project\\\\crown-cloth\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionType from \"./userType\";\nimport { googleProvider, auth, creatUserProfileDocument, getCurrentUser } from \"../../firebase/firebase.utils\";\nimport { signInFailure, signInSuccess, signOutSuccess, signOutFailure } from \"./userAction\"; //share functionality between sign in with pop up and email\n\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(creatUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess(_objectSpread({\n      id: userSnapshot.id\n    }, userSnapshot.data())));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} //sign in with google pop up\n\nexport function* signInWithGoogle() {\n  try {\n    const _ref = yield auth.signInWithPopup(googleProvider),\n          user = _ref.user;\n\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionType.GOOGLE_SIGN_IN_START, signInWithGoogle);\n} //sign in with email and password\n\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const _ref2 = yield auth.signInWithEmailAndPassword(email, password),\n          user = _ref2.user;\n\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionType.EMAIL_SIGN_IN_START, signInWithEmail);\n} //check for persistence\n\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionType.CHECK_USER_SESSION, isUserAuthenticated);\n} //user sign out\n\nexport function* userSignOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* onUserSignOut() {\n  yield takeLatest(UserActionType.SIGN_OUT_START, userSignOut);\n}\nexport function* userSaga() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onUserSignOut)]);\n}","map":{"version":3,"sources":["C:/Users/programing/webstorm project/crown-cloth/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionType","googleProvider","auth","creatUserProfileDocument","getCurrentUser","signInFailure","signInSuccess","signOutSuccess","signOutFailure","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","signInWithGoogle","signInWithPopup","user","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onEmailSignInStart","EMAIL_SIGN_IN_START","isUserAuthenticated","onCheckUserSession","CHECK_USER_SESSION","userSignOut","signOut","onUserSignOut","SIGN_OUT_START","userSaga"],"mappings":"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","sourcesContent":["import {takeLatest,put,all,call} from 'redux-saga/effects';\r\n\r\nimport UserActionType from \"./userType\";\r\n\r\nimport {googleProvider,auth,creatUserProfileDocument,getCurrentUser} from \"../../firebase/firebase.utils\";\r\n\r\nimport {signInFailure,signInSuccess,signOutSuccess,signOutFailure} from \"./userAction\";\r\n\r\n\r\n//share functionality between sign in with pop up and email\r\nexport function* getSnapshotFromUserAuth(userAuth) {\r\n    try{\r\n        const userRef = yield call(creatUserProfileDocument,userAuth);\r\n        const userSnapshot = yield userRef.get();\r\n        yield put(signInSuccess({id:userSnapshot.id , ...userSnapshot.data()}))\r\n    }catch (error) {\r\n        yield put(signInFailure(error))\r\n    }\r\n\r\n}\r\n\r\n//sign in with google pop up\r\nexport function* signInWithGoogle() {\r\n    try{\r\n        const {user} = yield auth.signInWithPopup(googleProvider);\r\n        yield getSnapshotFromUserAuth(user);\r\n    }catch (error) {\r\n        yield put(signInFailure(error))\r\n    }\r\n}\r\n\r\nexport function* onGoogleSignInStart() {\r\n yield takeLatest(\r\n     UserActionType.GOOGLE_SIGN_IN_START,\r\n     signInWithGoogle\r\n )\r\n}\r\n\r\n//sign in with email and password\r\nexport function* signInWithEmail({payload:{email,password}}){\r\n    try{\r\n        const {user} = yield auth.signInWithEmailAndPassword(email,password);\r\n        yield getSnapshotFromUserAuth(user);\r\n\r\n    }catch(error){\r\n        yield put(signInFailure(error))\r\n    }\r\n}\r\n\r\nexport function* onEmailSignInStart() {\r\n    yield takeLatest(\r\n        UserActionType.EMAIL_SIGN_IN_START,\r\n        signInWithEmail\r\n    )\r\n}\r\n\r\n//check for persistence\r\nexport function* isUserAuthenticated() {\r\n    try {\r\n        const userAuth = yield getCurrentUser();\r\n        if(!userAuth) return ;\r\n        yield getSnapshotFromUserAuth(userAuth);\r\n    }catch (error) {\r\n        yield put(signInFailure(error))\r\n    }\r\n}\r\n\r\nexport function* onCheckUserSession(){\r\n    yield takeLatest(\r\n        UserActionType.CHECK_USER_SESSION,\r\n        isUserAuthenticated\r\n    )\r\n}\r\n\r\n//user sign out\r\nexport function* userSignOut() {\r\n   try {\r\n       yield auth.signOut();\r\n       yield put(signOutSuccess());\r\n   }catch (error) {\r\n       yield put(signOutFailure(error))\r\n   }\r\n\r\n}\r\n\r\nexport function* onUserSignOut() {\r\n    yield takeLatest(\r\n        UserActionType.SIGN_OUT_START,\r\n        userSignOut\r\n    )\r\n}\r\n\r\nexport function* userSaga() {\r\n    yield all([call(onGoogleSignInStart),call(onEmailSignInStart),call(onCheckUserSession),call(onUserSignOut)])\r\n}\r\n"]},"metadata":{},"sourceType":"module"}