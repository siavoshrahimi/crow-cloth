{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\programing\\\\webstorm project\\\\crown-cloth\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionType from \"./userType\";\nimport { googleProvider, auth, creatUserProfileDocument, getCurrentUser } from \"../../firebase/firebase.utils\";\nimport { signInFailure, signInSuccess, signOutSuccess, signOutFailure, signUpFailure, signUpSuccess } from \"./userAction\"; //share functionality between sign in with pop up and email\n\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(creatUserProfileDocument, userAuth, additionalData);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess(_objectSpread({\n      id: userSnapshot.id\n    }, userSnapshot.data())));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} //sign in with google pop up\n\nexport function* signInWithGoogle() {\n  try {\n    const _ref = yield auth.signInWithPopup(googleProvider),\n          user = _ref.user;\n\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionType.GOOGLE_SIGN_IN_START, signInWithGoogle);\n} //sign in with email and password\n\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const _ref2 = yield auth.signInWithEmailAndPassword(email, password),\n          user = _ref2.user;\n\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionType.EMAIL_SIGN_IN_START, signInWithEmail);\n} //check for persistence\n\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionType.CHECK_USER_SESSION, isUserAuthenticated);\n} //user sign out\n\nexport function* userSignOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* onUserSignOut() {\n  yield takeLatest(UserActionType.SIGN_OUT_START, userSignOut);\n} //user sign up\n\nexport function* signUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    const _ref3 = yield auth.createUserWithEmailAndPassword(email, password),\n          user = _ref3.user;\n\n    yield put(signUpSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionType.SIGN_UP_START, signUp);\n} //sign in after sign up\n\nexport function* signInAfterSignUp({\n  payload: {\n    user,\n    additionalData\n  }\n}) {\n  yield getSnapshotFromUserAuth(user, additionalData);\n}\nexport function* onSignUpSuccess() {\n  yield takeLatest(UserActionType.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\nexport function* userSaga() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onUserSignOut), call(onSignUpStart), call(onSignUpSuccess)]);\n}","map":{"version":3,"sources":["C:/Users/programing/webstorm project/crown-cloth/client/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionType","googleProvider","auth","creatUserProfileDocument","getCurrentUser","signInFailure","signInSuccess","signOutSuccess","signOutFailure","signUpFailure","signUpSuccess","getSnapshotFromUserAuth","userAuth","additionalData","userRef","userSnapshot","get","id","data","error","signInWithGoogle","signInWithPopup","user","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onEmailSignInStart","EMAIL_SIGN_IN_START","isUserAuthenticated","onCheckUserSession","CHECK_USER_SESSION","userSignOut","signOut","onUserSignOut","SIGN_OUT_START","signUp","displayName","createUserWithEmailAndPassword","onSignUpStart","SIGN_UP_START","signInAfterSignUp","onSignUpSuccess","SIGN_UP_SUCCESS","userSaga"],"mappings":"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","sourcesContent":["import {takeLatest,put,all,call} from 'redux-saga/effects';\r\n\r\nimport UserActionType from \"./userType\";\r\n\r\nimport {googleProvider,auth,creatUserProfileDocument,getCurrentUser} from \"../../firebase/firebase.utils\";\r\n\r\nimport {signInFailure,signInSuccess,signOutSuccess,signOutFailure,signUpFailure,signUpSuccess} from \"./userAction\";\r\n\r\n\r\n//share functionality between sign in with pop up and email\r\nexport function* getSnapshotFromUserAuth(userAuth,additionalData) {\r\n    try{\r\n        const userRef = yield call(creatUserProfileDocument,userAuth,additionalData);\r\n        const userSnapshot = yield userRef.get();\r\n        yield put(signInSuccess({id:userSnapshot.id , ...userSnapshot.data()}))\r\n    }catch (error) {\r\n        yield put(signInFailure(error))\r\n    }\r\n\r\n}\r\n\r\n//sign in with google pop up\r\nexport function* signInWithGoogle() {\r\n    try{\r\n        const {user} = yield auth.signInWithPopup(googleProvider);\r\n        yield getSnapshotFromUserAuth(user);\r\n    }catch (error) {\r\n        yield put(signInFailure(error))\r\n    }\r\n}\r\n\r\nexport function* onGoogleSignInStart() {\r\n yield takeLatest(\r\n     UserActionType.GOOGLE_SIGN_IN_START,\r\n     signInWithGoogle\r\n )\r\n}\r\n\r\n//sign in with email and password\r\nexport function* signInWithEmail({payload:{email,password}}){\r\n    try{\r\n        const {user} = yield auth.signInWithEmailAndPassword(email,password);\r\n        yield getSnapshotFromUserAuth(user);\r\n\r\n    }catch(error){\r\n        yield put(signInFailure(error))\r\n    }\r\n}\r\n\r\nexport function* onEmailSignInStart() {\r\n    yield takeLatest(\r\n        UserActionType.EMAIL_SIGN_IN_START,\r\n        signInWithEmail\r\n    )\r\n}\r\n\r\n//check for persistence\r\nexport function* isUserAuthenticated() {\r\n    try {\r\n        const userAuth = yield getCurrentUser();\r\n        if(!userAuth) return ;\r\n        yield getSnapshotFromUserAuth(userAuth);\r\n    }catch (error) {\r\n        yield put(signInFailure(error))\r\n    }\r\n}\r\n\r\nexport function* onCheckUserSession(){\r\n    yield takeLatest(\r\n        UserActionType.CHECK_USER_SESSION,\r\n        isUserAuthenticated\r\n    )\r\n}\r\n\r\n//user sign out\r\nexport function* userSignOut() {\r\n   try {\r\n       yield auth.signOut();\r\n       yield put(signOutSuccess());\r\n   }catch (error) {\r\n       yield put(signOutFailure(error))\r\n   }\r\n\r\n}\r\n\r\nexport function* onUserSignOut() {\r\n    yield takeLatest(\r\n        UserActionType.SIGN_OUT_START,\r\n        userSignOut\r\n    )\r\n}\r\n\r\n//user sign up\r\nexport function* signUp({payload:{email,password,displayName}}) {\r\n    try {\r\n        const{user} =yield auth.createUserWithEmailAndPassword(email,password);\r\n        yield put(signUpSuccess({user,additionalData:{displayName}}));\r\n    }catch (error) {\r\n        yield put(signUpFailure(error))\r\n    }\r\n}\r\n\r\nexport function* onSignUpStart() {\r\n    yield takeLatest(\r\n        UserActionType.SIGN_UP_START,\r\n        signUp\r\n    )\r\n}\r\n\r\n//sign in after sign up\r\nexport function* signInAfterSignUp({payload:{user,additionalData}}) {\r\n    yield getSnapshotFromUserAuth(user,additionalData)\r\n}\r\n\r\nexport function* onSignUpSuccess() {\r\n    yield takeLatest(\r\n        UserActionType.SIGN_UP_SUCCESS,\r\n        signInAfterSignUp\r\n    )\r\n}\r\n\r\nexport function* userSaga() {\r\n    yield all([\r\n        call(onGoogleSignInStart),\r\n        call(onEmailSignInStart),\r\n        call(onCheckUserSession),\r\n        call(onUserSignOut),\r\n        call(onSignUpStart),\r\n        call(onSignUpSuccess)\r\n    ])\r\n}\r\n"]},"metadata":{},"sourceType":"module"}